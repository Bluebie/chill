var search_data = {"index":{"searchIndex":["chilldb","bulkupdateerrors","database","design","document","indifferenthash","list","==()","[]()","[]()","[]=()","add_views()","commit!()","commit!()","commit!()","commit!()","commit_all!()","compact!()","database()","delete()","delete!()","delete!()","delete!()","delete_all!()","design()","docs()","document()","document()","each_pair()","everything()","goes()","id()","ids()","info()","inspect()","inspect()","key()","keys()","language()","list()","load()","load()","method_missing()","new()","open()","query()","reset()","revision()","revision=()","revisions()","rows()","template()","templates()","to_h()","to_hash()","to_param()","values()","views()"],"longSearchIndex":["chilldb","chilldb::bulkupdateerrors","chilldb::database","chilldb::design","chilldb::document","chilldb::indifferenthash","chilldb::list","chilldb::document#==()","chilldb#[]()","chilldb::list#[]()","chilldb#[]=()","chilldb::design#add_views()","chilldb#commit!()","chilldb::design#commit!()","chilldb::document#commit!()","chilldb::list#commit!()","chilldb::list#commit_all!()","chilldb::database#compact!()","chilldb#database()","chilldb::document#delete()","chilldb#delete!()","chilldb::document#delete!()","chilldb::list#delete!()","chilldb::list#delete_all!()","chilldb#design()","chilldb::list#docs()","chilldb#document()","chilldb::design#document()","chilldb::list#each_pair()","chilldb#everything()","chilldb::goes()","chilldb::list#id()","chilldb::list#ids()","chilldb::database#info()","chilldb::bulkupdateerrors#inspect()","chilldb::database#inspect()","chilldb::list#key()","chilldb::list#keys()","chilldb::design#language()","chilldb#list()","chilldb::document::load()","chilldb::document#load()","chilldb::indifferenthash#method_missing()","chilldb::design::new()","chilldb#open()","chilldb::design#query()","chilldb::document#reset()","chilldb::document#revision()","chilldb::document#revision=()","chilldb::document#revisions()","chilldb::list#rows()","chilldb#template()","chilldb#templates()","chilldb::list#to_h()","chilldb::indifferenthash#to_hash()","chilldb::document#to_param()","chilldb::list#values()","chilldb::design#views()"],"info":[["ChillDB","","ChillDB.html","","<p>The main ChillDB module - This is where it all starts\n<p>Throughout these docs you’ll find classes under …\n"],["ChillDB::BulkUpdateErrors","","ChillDB/BulkUpdateErrors.html","","<p>Represents one or more failure when doing a bulk commit or delete.\n"],["ChillDB::Database","","ChillDB/Database.html","","<p>A Database abstraction full of internal gizmos and a few external ones too.\nYou can access your Database …\n"],["ChillDB::Design","","ChillDB/Design.html","","<p>Representing a named design in the Couch database, Design is used to setup\nviews. Views index all of …\n"],["ChillDB::Document","","ChillDB/Document.html","","<p>ChillDB Document, normally created from a template via ChillDB.template or\nfrom scratch via ChillDB.document …\n"],["ChillDB::IndifferentHash","","ChillDB/IndifferentHash.html","","<p>A simple version of Hash which converts keys to strings - so symbols and\nstrings can be used interchangably …\n"],["ChillDB::List","","ChillDB/List.html","","<p>A special sort of Array designed for storing lists of documents, and\nparticularly the results of ChillDB::Design#query …\n"],["==","ChillDB::Document","ChillDB/Document.html#method-i-3D-3D","(other_doc)","<p>A loose equality check. Two documents are considered equal if their _id and\n_rev are equal, and they …\n"],["[]","ChillDB","ChillDB.html#method-i-5B-5D","(id = false)",""],["[]","ChillDB::List","ChillDB/List.html#method-i-5B-5D","(key)","<p>Lookup a document, by a key in the list. If there are multiple entries in\nthe view with this key, the …\n"],["[]=","ChillDB","ChillDB.html#method-i-5B-5D-3D","(document, hash)","<p>Commit a ChillDB::Document or a Hash to the database with a specific _id.\nThis method is useful for quickly …\n"],["add_views","ChillDB::Design","ChillDB/Design.html#method-i-add_views","(collection)","<p>Add more views to an existing design. See also #views\n"],["commit!","ChillDB","ChillDB.html#method-i-commit-21","(*documents)","<p>Commit an array of ChillDB::Documents and/or Hashes to the server as new or\nupdated documents. This collection …\n"],["commit!","ChillDB::Design","ChillDB/Design.html#method-i-commit-21","()","<p>Commit this design document to the server and start the server’s process of\nupdating the view’s contents. …\n"],["commit!","ChillDB::Document","ChillDB/Document.html#method-i-commit-21","()","<p>Write any changes to the database. If this is a new document, one will be\ncreated on the Couch server. …\n"],["commit!","ChillDB::List","ChillDB/List.html#method-i-commit-21","()","<p>Commit every document in this list to the server in a single quick request.\nEvery document which can …\n"],["commit_all!","ChillDB::List","ChillDB/List.html#method-i-commit_all-21","()",""],["compact!","ChillDB::Database","ChillDB/Database.html#method-i-compact-21","()","<p>Ask the CouchDB server to compact this database, effectively making a copy\nand moving all recent revisions …\n"],["database","ChillDB","ChillDB.html#method-i-database","()","<p>Returns this app’s ChillDB::Database instance\n"],["delete","ChillDB::Document","ChillDB/Document.html#method-i-delete","()","<p>Mark this document for deletion. A commit! is required to delete the\ndocument from the server. You can …\n"],["delete!","ChillDB","ChillDB.html#method-i-delete-21","(*documents)","<p>A shortcut for #commit! which marks the documents for deletion before\napplying the commit, effectively …\n"],["delete!","ChillDB::Document","ChillDB/Document.html#method-i-delete-21","()","<p>Shortcut for document.delete.commit! - deletes document from server\nimmediately, returning the server’s …\n"],["delete!","ChillDB::List","ChillDB/List.html#method-i-delete-21","()","<p>Delete every document in this list from the server. If this list was\nreturned by ChillDB::Design#query …\n"],["delete_all!","ChillDB::List","ChillDB/List.html#method-i-delete_all-21","()",""],["design","ChillDB","ChillDB.html#method-i-design","(name)","<p>Loads or creates a new ChillDB::Design with a specified name. Designs are\nused to create views, which …\n"],["docs","ChillDB::List","ChillDB/List.html#method-i-docs","()","<p>Returns an Array of all the documents in this list.\n<p>Note that querying a view with ChillDB::Design#query …\n"],["document","ChillDB","ChillDB.html#method-i-document","(id = false)","<p>Loads or creates a document with a specified _id. If no _id is specified a\nnew blank document is created …\n"],["document","ChillDB::Design","ChillDB/Design.html#method-i-document","()","<p>lazy load document - referencing this causes load from database\n"],["each_pair","ChillDB::List","ChillDB/List.html#method-i-each_pair","(&proc)","<p>Iterates each key/value pair using a supplied proc.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">list</span>.<span class=\"ruby-identifier\">each_pair</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">key</span>, <span class=\"ruby-identifier\">value</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">&quot;#{key}: ...\n</span></pre>\n"],["everything","ChillDB","ChillDB.html#method-i-everything","()","<p>Queries the server for every document. Returns a ChillDB::List.\n<p>This method is mainly useful for maintenence …\n"],["goes","ChillDB","ChillDB.html#method-c-goes","(database_name, *args)","<p>Creates a copy of ChillDB linked to a database named with the first\nargument. You can also provide host, …\n"],["id","ChillDB::List","ChillDB/List.html#method-i-id","(value)","<p>fetch a document by it’s id from this list. Useful only for queries with\n&lt;pp&gt;{ include_docs: true …\n"],["ids","ChillDB::List","ChillDB/List.html#method-i-ids","()","<p>Returns an Array of all the document _id strings in the list\n"],["info","ChillDB::Database","ChillDB/Database.html#method-i-info","()","<p>Gets a Hash of database configuration and status info from the server as a\nChillDB::IndifferentHash. …\n"],["inspect","ChillDB::BulkUpdateErrors","ChillDB/BulkUpdateErrors.html#method-i-inspect","()","<p>friendly message listing the failures for each document\n"],["inspect","ChillDB::Database","ChillDB/Database.html#method-i-inspect","()","<p>pretty output for debugging things :)\n"],["key","ChillDB::List","ChillDB/List.html#method-i-key","(value)","<p>Lookup a key from the list. Returns a ChillDB::IndifferentHash containing:\n\n<pre class=\"ruby\">{\n  <span class=\"ruby-string\">'key'</span>   =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">key</span> <span class=\"ruby-identifier\">from</span> <span class=\"ruby-identifier\">database</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["keys","ChillDB::List","ChillDB/List.html#method-i-keys","()","<p>Returns an Array of keys in the list\n"],["language","ChillDB::Design","ChillDB/Design.html#method-i-language","(set = nil)","<p>get’s the current language of this design document. Usually this would be\n“javascript”. If …\n"],["list","ChillDB","ChillDB.html#method-i-list","(array = [])","<p>creates a new ChillDB::List from an array of ChillDB::Documents and hashes.\nThis method is mainly used …\n"],["load","ChillDB::Document","ChillDB/Document.html#method-c-load","(database, docid, revision = nil)","<p>load a documet from a ChillDB::Database, with a specific document id, and\noptionally a specific revision. …\n"],["load","ChillDB::Document","ChillDB/Document.html#method-i-load","(lookup_revision = nil)","<p>load the current document again from the server, fetching any updates or a\nspecific revision.\n<p>Returns: …\n"],["method_missing","ChillDB::IndifferentHash","ChillDB/IndifferentHash.html#method-i-method_missing","(name, *args)","<p>getters and setters for hash items\n"],["new","ChillDB::Design","ChillDB/Design.html#method-c-new","(database, name)",""],["open","ChillDB","ChillDB.html#method-i-open","(*args)","<p>Gets a reference to a resource on the database server, useful mainly\ninternally. You shouldn’t need to …\n"],["query","ChillDB::Design","ChillDB/Design.html#method-i-query","(view, options = {})","<p>Query a named view. Returns a ChillDB::List, which works like a Hash or an\nArray containing each result. …\n"],["reset","ChillDB::Document","ChillDB/Document.html#method-i-reset","(values)","<p>replace all values in this document with new ones, effectively making it a\nnew document\n<p>Arguments:\n\n<pre>values: ...</pre>\n"],["revision","ChillDB::Document","ChillDB/Document.html#method-i-revision","()","<p>get’s the current document revision identifier string\n<p>Returns: (String) revision identifier\n"],["revision=","ChillDB::Document","ChillDB/Document.html#method-i-revision-3D","(new_revision)","<p>set the current document revision, reloading document content from the\ncouch server.\n<p>Arguments:\n\n<pre>new_revision: ...</pre>\n"],["revisions","ChillDB::Document","ChillDB/Document.html#method-i-revisions","()","<p>fetch an array of this document’s available revisions from the server\n<p>Returns: array of revision identifier …\n"],["rows","ChillDB::List","ChillDB/List.html#method-i-rows","()","<p>Grab all the rows - actually just self.\n"],["template","ChillDB","ChillDB.html#method-i-template","(kind)","<p>Gets a copy of a template previously defined using #templates. further info\non usage is in the description …\n"],["templates","ChillDB","ChillDB.html#method-i-templates","(obj)","<p>#templates stores a collection of new document templates. This is a handy\nshortcut to hold your different …\n"],["to_h","ChillDB::List","ChillDB/List.html#method-i-to_h","(value = :value)","<p>make a regular ruby hash version\n<p>By default returns a hash containing <code>{ key: value }</code> pairs from\nthe list. …\n"],["to_hash","ChillDB::IndifferentHash","ChillDB/IndifferentHash.html#method-i-to_hash","()","<p>Convert to a regular ruby Hash\n"],["to_param","ChillDB::Document","ChillDB/Document.html#method-i-to_param","()","<p>to_param is supplied for integration with url routers in web frameworks\nlike Rails and Camping. Defaults …\n"],["values","ChillDB::List","ChillDB/List.html#method-i-values","()","<p>Returns an Array of all the emitted values in the list\n"],["views","ChillDB::Design","ChillDB/Design.html#method-i-views","(collection)","<p>Set the views in this design. Argument is a Hash containing String’s for\neach javascript (by default) …\n"]]}}